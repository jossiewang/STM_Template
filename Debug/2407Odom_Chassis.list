
2407Odom_Chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d84  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f48  08003f48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f50  08003f50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000087c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000888  20000888  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013df4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002166  00000000  00000000  00033e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00035f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  00037028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024947  00000000  00000000  00038000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011921  00000000  00000000  0005c947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1982  00000000  00000000  0006e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014fbea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004800  00000000  00000000  0014fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003f18 	.word	0x08003f18

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003f18 	.word	0x08003f18

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	t_ms = 0;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0x38>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fdab 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f817 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 fa19 	bl	8000938 <MX_GPIO_Init>
  MX_ETH_Init();
 8000506:	f000 f87d 	bl	8000604 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800050a:	f000 f9bd 	bl	8000888 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800050e:	f000 f9e5 	bl	80008dc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000512:	f000 f965 	bl	80007e0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000516:	f000 f90f 	bl	8000738 <MX_TIM3_Init>
  MX_TIM2_Init();
 800051a:	f000 f8c1 	bl	80006a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800051e:	4803      	ldr	r0, [pc, #12]	; (800052c <main+0x3c>)
 8000520:	f002 fa32 	bl	8002988 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x34>
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028
 800052c:	20000254 	.word	0x20000254

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fce2 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000590:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a4:	23a8      	movs	r3, #168	; 0xa8
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fcff 	bl	8001fb8 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 fa7e 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2105      	movs	r1, #5
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 ff60 	bl	80024a8 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ee:	f000 fa67 	bl	8000ac0 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ETH_Init+0x84>)
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <MX_ETH_Init+0x88>)
 800060c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_ETH_Init+0x8c>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_ETH_Init+0x8c>)
 800061c:	22e1      	movs	r2, #225	; 0xe1
 800061e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_ETH_Init+0x8c>)
 8000622:	2200      	movs	r2, #0
 8000624:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_ETH_Init+0x8c>)
 8000628:	2200      	movs	r2, #0
 800062a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_ETH_Init+0x8c>)
 800062e:	2200      	movs	r2, #0
 8000630:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ETH_Init+0x84>)
 8000634:	4a16      	ldr	r2, [pc, #88]	; (8000690 <MX_ETH_Init+0x8c>)
 8000636:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_ETH_Init+0x84>)
 800063a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800063e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ETH_Init+0x84>)
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <MX_ETH_Init+0x90>)
 8000644:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_ETH_Init+0x84>)
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_ETH_Init+0x94>)
 800064a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_ETH_Init+0x84>)
 800064e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000652:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <MX_ETH_Init+0x84>)
 8000656:	f000 fea5 	bl	80013a4 <HAL_ETH_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000660:	f000 fa2e 	bl	8000ac0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000664:	2238      	movs	r2, #56	; 0x38
 8000666:	2100      	movs	r1, #0
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_ETH_Init+0x98>)
 800066a:	f003 fc4d 	bl	8003f08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_ETH_Init+0x98>)
 8000670:	2221      	movs	r2, #33	; 0x21
 8000672:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_ETH_Init+0x98>)
 8000676:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800067a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_ETH_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200001a4 	.word	0x200001a4
 800068c:	40028000 	.word	0x40028000
 8000690:	2000087c 	.word	0x2000087c
 8000694:	20000104 	.word	0x20000104
 8000698:	20000064 	.word	0x20000064
 800069c:	2000002c 	.word	0x2000002c

080006a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_TIM2_Init+0x94>)
 80006be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_TIM2_Init+0x94>)
 80006c6:	2253      	movs	r2, #83	; 0x53
 80006c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_TIM2_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_TIM2_Init+0x94>)
 80006d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_TIM2_Init+0x94>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_TIM2_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006e4:	4813      	ldr	r0, [pc, #76]	; (8000734 <MX_TIM2_Init+0x94>)
 80006e6:	f002 f8ff 	bl	80028e8 <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006f0:	f000 f9e6 	bl	8000ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4619      	mov	r1, r3
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_TIM2_Init+0x94>)
 8000702:	f002 fb5f 	bl	8002dc4 <HAL_TIM_ConfigClockSource>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 f9d8 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_TIM2_Init+0x94>)
 800071e:	f002 fd7b 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000728:	f000 f9ca 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000254 	.word	0x20000254

08000738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2224      	movs	r2, #36	; 0x24
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fbde 	bl	8003f08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_TIM3_Init+0xa0>)
 8000756:	4a21      	ldr	r2, [pc, #132]	; (80007dc <MX_TIM3_Init+0xa4>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_TIM3_Init+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_TIM3_Init+0xa0>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_TIM3_Init+0xa0>)
 8000768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_TIM3_Init+0xa0>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_TIM3_Init+0xa0>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800077a:	2303      	movs	r3, #3
 800077c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000782:	2301      	movs	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000792:	2301      	movs	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_TIM3_Init+0xa0>)
 80007a6:	f002 f95f 	bl	8002a68 <HAL_TIM_Encoder_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80007b0:	f000 f986 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_TIM3_Init+0xa0>)
 80007c2:	f002 fd29 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80007cc:	f000 f978 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3730      	adds	r7, #48	; 0x30
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000029c 	.word	0x2000029c
 80007dc:	40000400 	.word	0x40000400

080007e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2224      	movs	r2, #36	; 0x24
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fb8a 	bl	8003f08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_TIM4_Init+0xa0>)
 80007fe:	4a21      	ldr	r2, [pc, #132]	; (8000884 <MX_TIM4_Init+0xa4>)
 8000800:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_TIM4_Init+0xa0>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_TIM4_Init+0xa0>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_TIM4_Init+0xa0>)
 8000810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000814:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_TIM4_Init+0xa0>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_TIM4_Init+0xa0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000822:	2303      	movs	r3, #3
 8000824:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083a:	2301      	movs	r3, #1
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_TIM4_Init+0xa0>)
 800084e:	f002 f90b 	bl	8002a68 <HAL_TIM_Encoder_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f932 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_TIM4_Init+0xa0>)
 800086a:	f002 fcd5 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000874:	f000 f924 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	; 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200002e4 	.word	0x200002e4
 8000884:	40000800 	.word	0x40000800

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_USART3_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART3_UART_Init+0x4c>)
 80008c0:	f002 fd3a 	bl	8003338 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f000 f8f9 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000032c 	.word	0x2000032c
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2201      	movs	r2, #1
 8000904:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2201      	movs	r2, #1
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	f001 fa2d 	bl	8001d7e <HAL_PCD_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 f8c9 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000370 	.word	0x20000370

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b4c      	ldr	r3, [pc, #304]	; (8000a84 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a4b      	ldr	r2, [pc, #300]	; (8000a84 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a44      	ldr	r2, [pc, #272]	; (8000a84 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a3d      	ldr	r2, [pc, #244]	; (8000a84 <MX_GPIO_Init+0x14c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b37      	ldr	r3, [pc, #220]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a36      	ldr	r2, [pc, #216]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a2f      	ldr	r2, [pc, #188]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009fc:	4822      	ldr	r0, [pc, #136]	; (8000a88 <MX_GPIO_Init+0x150>)
 80009fe:	f001 f9a5 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0x154>)
 8000a08:	f001 f9a0 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481b      	ldr	r0, [pc, #108]	; (8000a90 <MX_GPIO_Init+0x158>)
 8000a24:	f000 ffe6 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a28:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_GPIO_Init+0x150>)
 8000a42:	f000 ffd7 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a46:	2340      	movs	r3, #64	; 0x40
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_GPIO_Init+0x154>)
 8000a5e:	f000 ffc9 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_GPIO_Init+0x154>)
 8000a76:	f000 ffbd 	bl	80019f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40020800 	.word	0x40020800

08000a94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa4:	d104      	bne.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		t_ms++;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000aae:	6013      	str	r3, [r2, #0]
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	20000028 	.word	0x20000028

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	; 0x38
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a55      	ldr	r2, [pc, #340]	; (8000c90 <HAL_ETH_MspInit+0x174>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	f040 80a4 	bne.w	8000c88 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	4b53      	ldr	r3, [pc, #332]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a52      	ldr	r2, [pc, #328]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b58:	623b      	str	r3, [r7, #32]
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	4a4b      	ldr	r2, [pc, #300]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6c:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a44      	ldr	r2, [pc, #272]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a3d      	ldr	r2, [pc, #244]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c04:	2332      	movs	r3, #50	; 0x32
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481e      	ldr	r0, [pc, #120]	; (8000c98 <HAL_ETH_MspInit+0x17c>)
 8000c20:	f000 fee8 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c24:	2386      	movs	r3, #134	; 0x86
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <HAL_ETH_MspInit+0x180>)
 8000c40:	f000 fed8 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <HAL_ETH_MspInit+0x184>)
 8000c62:	f000 fec7 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c78:	230b      	movs	r3, #11
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000c84:	f000 feb6 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3738      	adds	r7, #56	; 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40028000 	.word	0x40028000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb8:	d115      	bne.n	8000ce6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_TIM_Base_MspInit+0x48>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_TIM_Base_MspInit+0x48>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_TIM_Base_MspInit+0x48>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	201c      	movs	r0, #28
 8000cdc:	f000 fb2b 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce0:	201c      	movs	r0, #28
 8000ce2:	f000 fb44 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a41      	ldr	r2, [pc, #260]	; (8000e18 <HAL_TIM_Encoder_MspInit+0x124>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d14a      	bne.n	8000dac <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a3f      	ldr	r2, [pc, #252]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a31      	ldr	r2, [pc, #196]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d6a:	2340      	movs	r3, #64	; 0x40
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4826      	ldr	r0, [pc, #152]	; (8000e20 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000d86:	f000 fe35 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	481f      	ldr	r0, [pc, #124]	; (8000e24 <HAL_TIM_Encoder_MspInit+0x130>)
 8000da6:	f000 fe25 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000daa:	e031      	b.n	8000e10 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_TIM_Encoder_MspInit+0x134>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12c      	bne.n	8000e10 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_TIM_Encoder_MspInit+0x128>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000dee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e00:	2302      	movs	r3, #2
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <HAL_TIM_Encoder_MspInit+0x138>)
 8000e0c:	f000 fdf2 	bl	80019f4 <HAL_GPIO_Init>
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40000400 	.word	0x40000400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40000800 	.word	0x40000800
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12c      	bne.n	8000eac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000ea8:	f000 fda4 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40004800 	.word	0x40004800
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee0:	d13f      	bne.n	8000f62 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000efe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f10:	230a      	movs	r3, #10
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4815      	ldr	r0, [pc, #84]	; (8000f70 <HAL_PCD_MspInit+0xb0>)
 8000f1c:	f000 fd6a 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <HAL_PCD_MspInit+0xb0>)
 8000f36:	f000 fd5d 	bl	80019f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6353      	str	r3, [r2, #52]	; 0x34
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_PCD_MspInit+0xac>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f89a 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM2_IRQHandler+0x10>)
 8000fce:	f001 fdf1 	bl	8002bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000254 	.word	0x20000254

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f002 ff47 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fa5d 	bl	80004f0 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001038:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001044:	08003f58 	.word	0x08003f58
  ldr r2, =_sbss
 8001048:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800104c:	20000888 	.word	0x20000888

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f94f 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fd20 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f967 	bl	800138a <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f92f 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	20000884 	.word	0x20000884

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000884 	.word	0x20000884

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff29 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff3e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff31 	bl	80011e4 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e06c      	b.n	8001490 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2223      	movs	r2, #35	; 0x23
 80013c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fba7 	bl	8000b1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_ETH_Init+0xf4>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <HAL_ETH_Init+0xf4>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_ETH_Init+0xf4>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_ETH_Init+0xf8>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <HAL_ETH_Init+0xf8>)
 80013f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_ETH_Init+0xf8>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4927      	ldr	r1, [pc, #156]	; (800149c <HAL_ETH_Init+0xf8>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_ETH_Init+0xf8>)
 8001406:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff fe7e 	bl	8001120 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001426:	e011      	b.n	800144c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001428:	f7ff fe7a 	bl	8001120 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001436:	d909      	bls.n	800144c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2204      	movs	r2, #4
 800143c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	22e0      	movs	r2, #224	; 0xe0
 8001444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e021      	b.n	8001490 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1e4      	bne.n	8001428 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f958 	bl	8001714 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f9ff 	bl	8001868 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fa55 	bl	800191a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	461a      	mov	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9bd 	bl	80017f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2210      	movs	r2, #16
 800148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800

080014a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4b51      	ldr	r3, [pc, #324]	; (80015fc <ETH_SetMACConfig+0x15c>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7c1b      	ldrb	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <ETH_SetMACConfig+0x28>
 80014c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014c6:	e000      	b.n	80014ca <ETH_SetMACConfig+0x2a>
 80014c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	7c5b      	ldrb	r3, [r3, #17]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <ETH_SetMACConfig+0x38>
 80014d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d6:	e000      	b.n	80014da <ETH_SetMACConfig+0x3a>
 80014d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	7fdb      	ldrb	r3, [r3, #31]
 80014e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	7f92      	ldrb	r2, [r2, #30]
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d102      	bne.n	80014fe <ETH_SetMACConfig+0x5e>
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	e000      	b.n	8001500 <ETH_SetMACConfig+0x60>
 80014fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001500:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001508:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800150e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001516:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetMACConfig+0x88>
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	e000      	b.n	800152a <ETH_SetMACConfig+0x8a>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7bdb      	ldrb	r3, [r3, #15]
 8001530:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001532:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001540:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001542:	4313      	orrs	r3, r2
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff fdec 	bl	8001138 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001586:	2a00      	cmp	r2, #0
 8001588:	d101      	bne.n	800158e <ETH_SetMACConfig+0xee>
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	e000      	b.n	8001590 <ETH_SetMACConfig+0xf0>
 800158e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001590:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001596:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800159e:	2a01      	cmp	r2, #1
 80015a0:	d101      	bne.n	80015a6 <ETH_SetMACConfig+0x106>
 80015a2:	2208      	movs	r2, #8
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0x108>
 80015a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80015b0:	2a01      	cmp	r2, #1
 80015b2:	d101      	bne.n	80015b8 <ETH_SetMACConfig+0x118>
 80015b4:	2204      	movs	r2, #4
 80015b6:	e000      	b.n	80015ba <ETH_SetMACConfig+0x11a>
 80015b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80015c2:	2a01      	cmp	r2, #1
 80015c4:	d101      	bne.n	80015ca <ETH_SetMACConfig+0x12a>
 80015c6:	2202      	movs	r2, #2
 80015c8:	e000      	b.n	80015cc <ETH_SetMACConfig+0x12c>
 80015ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015cc:	4313      	orrs	r3, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fda7 	bl	8001138 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	ff20810f 	.word	0xff20810f

08001600 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <ETH_SetDMAConfig+0x110>)
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	7b1b      	ldrb	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <ETH_SetDMAConfig+0x2c>
 8001626:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800162a:	e000      	b.n	800162e <ETH_SetDMAConfig+0x2e>
 800162c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7b5b      	ldrb	r3, [r3, #13]
 8001632:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001634:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	7f52      	ldrb	r2, [r2, #29]
 800163a:	2a00      	cmp	r2, #0
 800163c:	d102      	bne.n	8001644 <ETH_SetDMAConfig+0x44>
 800163e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001642:	e000      	b.n	8001646 <ETH_SetDMAConfig+0x46>
 8001644:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001646:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7b9b      	ldrb	r3, [r3, #14]
 800164c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800164e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001654:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	7f1b      	ldrb	r3, [r3, #28]
 800165a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800165c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	7f9b      	ldrb	r3, [r3, #30]
 8001662:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001664:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800166a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001672:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001674:	4313      	orrs	r3, r2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fd4e 	bl	8001138 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	461a      	mov	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fd1f 	bl	8001138 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	f8de3f23 	.word	0xf8de3f23

08001714 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0a6      	sub	sp, #152	; 0x98
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001722:	2301      	movs	r3, #1
 8001724:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001728:	2300      	movs	r3, #0
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001732:	2301      	movs	r3, #1
 8001734:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001750:	2300      	movs	r3, #0
 8001752:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800175a:	2300      	movs	r3, #0
 800175c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800177c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001780:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe86 	bl	80014a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001794:	2301      	movs	r3, #1
 8001796:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001798:	2301      	movs	r3, #1
 800179a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4619      	mov	r1, r3
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff08 	bl	8001600 <ETH_SetDMAConfig>
}
 80017f0:	bf00      	nop
 80017f2:	3798      	adds	r7, #152	; 0x98
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3305      	adds	r3, #5
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	3204      	adds	r2, #4
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <ETH_MACAddressConfig+0x68>)
 800181a:	4413      	add	r3, r2
 800181c:	461a      	mov	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3303      	adds	r3, #3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	061a      	lsls	r2, r3, #24
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3302      	adds	r3, #2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	4313      	orrs	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <ETH_MACAddressConfig+0x6c>)
 800184a:	4413      	add	r3, r2
 800184c:	461a      	mov	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	6013      	str	r3, [r2, #0]
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40028040 	.word	0x40028040
 8001864:	40028044 	.word	0x40028044

08001868 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e03e      	b.n	80018f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68d9      	ldr	r1, [r3, #12]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	3206      	adds	r2, #6
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d80c      	bhi.n	80018d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	e004      	b.n	80018e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d9bd      	bls.n	8001876 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190c:	611a      	str	r2, [r3, #16]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e046      	b.n	80019b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6919      	ldr	r1, [r3, #16]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001964:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800196c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	3212      	adds	r2, #18
 8001982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d80c      	bhi.n	80019a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6919      	ldr	r1, [r3, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	e004      	b.n	80019b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d9b5      	bls.n	8001928 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e6:	60da      	str	r2, [r3, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e177      	b.n	8001d00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f040 8166 	bne.w	8001cfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d005      	beq.n	8001a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d017      	beq.n	8001ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d123      	bne.n	8001b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80c0 	beq.w	8001cfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <HAL_GPIO_Init+0x324>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b96:	4a61      	ldr	r2, [pc, #388]	; (8001d1c <HAL_GPIO_Init+0x328>)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_GPIO_Init+0x32c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d037      	beq.n	8001c32 <HAL_GPIO_Init+0x23e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a57      	ldr	r2, [pc, #348]	; (8001d24 <HAL_GPIO_Init+0x330>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_GPIO_Init+0x23a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a56      	ldr	r2, [pc, #344]	; (8001d28 <HAL_GPIO_Init+0x334>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d02b      	beq.n	8001c2a <HAL_GPIO_Init+0x236>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <HAL_GPIO_Init+0x338>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d025      	beq.n	8001c26 <HAL_GPIO_Init+0x232>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <HAL_GPIO_Init+0x33c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01f      	beq.n	8001c22 <HAL_GPIO_Init+0x22e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a53      	ldr	r2, [pc, #332]	; (8001d34 <HAL_GPIO_Init+0x340>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x22a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_GPIO_Init+0x344>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_GPIO_Init+0x348>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x222>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	; (8001d40 <HAL_GPIO_Init+0x34c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x21e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4f      	ldr	r2, [pc, #316]	; (8001d44 <HAL_GPIO_Init+0x350>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x21a>
 8001c0a:	2309      	movs	r3, #9
 8001c0c:	e012      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c0e:	230a      	movs	r3, #10
 8001c10:	e010      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c12:	2308      	movs	r3, #8
 8001c14:	e00e      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c16:	2307      	movs	r3, #7
 8001c18:	e00c      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	e00a      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x240>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x328>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a34      	ldr	r2, [pc, #208]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_GPIO_Init+0x354>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f ae84 	bls.w	8001a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40022400 	.word	0x40022400
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d68:	e003      	b.n	8001d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	619a      	str	r2, [r3, #24]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d80:	b08f      	sub	sp, #60	; 0x3c
 8001d82:	af0a      	add	r7, sp, #40	; 0x28
 8001d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e10f      	b.n	8001fb0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff f888 	bl	8000ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fdd5 	bl	800397e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	687e      	ldr	r6, [r7, #4]
 8001ddc:	466d      	mov	r5, sp
 8001dde:	f106 0410 	add.w	r4, r6, #16
 8001de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001df2:	1d33      	adds	r3, r6, #4
 8001df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	f001 fd60 	bl	80038bc <USB_CoreInit>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0d0      	b.n	8001fb0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fdc3 	bl	80039a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e04a      	b.n	8001eb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	333d      	adds	r3, #61	; 0x3d
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	333c      	adds	r3, #60	; 0x3c
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	b298      	uxth	r0, r3
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3344      	adds	r3, #68	; 0x44
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3340      	adds	r3, #64	; 0x40
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3348      	adds	r3, #72	; 0x48
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	334c      	adds	r3, #76	; 0x4c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3354      	adds	r3, #84	; 0x54
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3af      	bcc.n	8001e20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e044      	b.n	8001f50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d3b5      	bcc.n	8001ec6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	687e      	ldr	r6, [r7, #4]
 8001f62:	466d      	mov	r5, sp
 8001f64:	f106 0410 	add.w	r4, r6, #16
 8001f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f78:	1d33      	adds	r3, r6, #4
 8001f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f7c:	6838      	ldr	r0, [r7, #0]
 8001f7e:	f001 fd5b 	bl	8003a38 <USB_DevInit>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e00d      	b.n	8001fb0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 ff26 	bl	8003dfa <USB_DevDisconnect>

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e267      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d075      	beq.n	80020c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d00c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d112      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05b      	beq.n	80020c0 <HAL_RCC_OscConfig+0x108>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d157      	bne.n	80020c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e242      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x74>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6f      	ldr	r2, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6c      	ldr	r2, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 8002050:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff f856 	bl	8001120 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff f852 	bl	8001120 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e207      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xc0>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff f842 	bl	8001120 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff f83e 	bl	8001120 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1f3      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0xe8>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c7      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4937      	ldr	r1, [pc, #220]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fff7 	bl	8001120 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe fff3 	bl	8001120 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a8      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4925      	ldr	r1, [pc, #148]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe ffd6 	bl	8001120 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe ffd2 	bl	8001120 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e187      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d036      	beq.n	8002210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe ffb6 	bl	8001120 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe ffb2 	bl	8001120 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e167      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x200>
 80021d6:	e01b      	b.n	8002210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7fe ff9f 	bl	8001120 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	e00e      	b.n	8002204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe ff9b 	bl	8001120 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d907      	bls.n	8002204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e150      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	42470000 	.word	0x42470000
 8002200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ea      	bne.n	80021e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8097 	beq.w	800234c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a7c      	ldr	r2, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b7a      	ldr	r3, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCC_OscConfig+0x474>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a73      	ldr	r2, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe ff5b 	bl	8001120 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe ff57 	bl	8001120 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e10c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2ea>
 8002294:	4b64      	ldr	r3, [pc, #400]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a63      	ldr	r2, [pc, #396]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x30c>
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022c4:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a57      	ldr	r2, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a54      	ldr	r2, [pc, #336]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe ff1c 	bl	8001120 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe ff18 	bl	8001120 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0cb      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0ee      	beq.n	80022ec <HAL_RCC_OscConfig+0x334>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ff06 	bl	8001120 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe ff02 	bl	8001120 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0b5      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4a38      	ldr	r2, [pc, #224]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a1 	beq.w	8002498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d05c      	beq.n	800241c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d141      	bne.n	80023ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fed6 	bl	8001120 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fed2 	bl	8001120 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e087      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	3b01      	subs	r3, #1
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe feab 	bl	8001120 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fea7 	bl	8001120 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e05c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x416>
 80023ec:	e054      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fe94 	bl	8001120 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fe90 	bl	8001120 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e045      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x444>
 800241a:	e03d      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e038      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000
 8002430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d028      	beq.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d121      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d11a      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0cc      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d044      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d003      	beq.n	8002566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e067      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4934      	ldr	r1, [pc, #208]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7fe fdc2 	bl	8001120 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fdbe 	bl	8001120 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e04f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d20c      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f821 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fd22 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00
 8002664:	40023800 	.word	0x40023800
 8002668:	08003f30 	.word	0x08003f30
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b094      	sub	sp, #80	; 0x50
 800267a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	647b      	str	r3, [r7, #68]	; 0x44
 8002680:	2300      	movs	r3, #0
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002684:	2300      	movs	r3, #0
 8002686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268c:	4b79      	ldr	r3, [pc, #484]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d00d      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002698:	2b08      	cmp	r3, #8
 800269a:	f200 80e1 	bhi.w	8002860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x3a>
 80026a6:	e0db      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026ac:	e0db      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ae:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_RCC_GetSysClockFreq+0x208>)
 80026b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b2:	e0d8      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b4:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d063      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ca:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	2200      	movs	r2, #0
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026e6:	4622      	mov	r2, r4
 80026e8:	462b      	mov	r3, r5
 80026ea:	f04f 0000 	mov.w	r0, #0
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	0159      	lsls	r1, r3, #5
 80026f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f8:	0150      	lsls	r0, r2, #5
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4621      	mov	r1, r4
 8002700:	1a51      	subs	r1, r2, r1
 8002702:	6139      	str	r1, [r7, #16]
 8002704:	4629      	mov	r1, r5
 8002706:	eb63 0301 	sbc.w	r3, r3, r1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002718:	4659      	mov	r1, fp
 800271a:	018b      	lsls	r3, r1, #6
 800271c:	4651      	mov	r1, sl
 800271e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002722:	4651      	mov	r1, sl
 8002724:	018a      	lsls	r2, r1, #6
 8002726:	4651      	mov	r1, sl
 8002728:	ebb2 0801 	subs.w	r8, r2, r1
 800272c:	4659      	mov	r1, fp
 800272e:	eb63 0901 	sbc.w	r9, r3, r1
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800273e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002746:	4690      	mov	r8, r2
 8002748:	4699      	mov	r9, r3
 800274a:	4623      	mov	r3, r4
 800274c:	eb18 0303 	adds.w	r3, r8, r3
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	462b      	mov	r3, r5
 8002754:	eb49 0303 	adc.w	r3, r9, r3
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002766:	4629      	mov	r1, r5
 8002768:	024b      	lsls	r3, r1, #9
 800276a:	4621      	mov	r1, r4
 800276c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002770:	4621      	mov	r1, r4
 8002772:	024a      	lsls	r2, r1, #9
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277a:	2200      	movs	r2, #0
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
 800277e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002784:	f7fd fd32 	bl	80001ec <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	e058      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	2200      	movs	r2, #0
 800279a:	4618      	mov	r0, r3
 800279c:	4611      	mov	r1, r2
 800279e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027ac:	4642      	mov	r2, r8
 80027ae:	464b      	mov	r3, r9
 80027b0:	f04f 0000 	mov.w	r0, #0
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	0159      	lsls	r1, r3, #5
 80027ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027be:	0150      	lsls	r0, r2, #5
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4641      	mov	r1, r8
 80027c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027e4:	ebb2 040a 	subs.w	r4, r2, sl
 80027e8:	eb63 050b 	sbc.w	r5, r3, fp
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	00eb      	lsls	r3, r5, #3
 80027f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fa:	00e2      	lsls	r2, r4, #3
 80027fc:	4614      	mov	r4, r2
 80027fe:	461d      	mov	r5, r3
 8002800:	4643      	mov	r3, r8
 8002802:	18e3      	adds	r3, r4, r3
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	464b      	mov	r3, r9
 8002808:	eb45 0303 	adc.w	r3, r5, r3
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281a:	4629      	mov	r1, r5
 800281c:	028b      	lsls	r3, r1, #10
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002824:	4621      	mov	r1, r4
 8002826:	028a      	lsls	r2, r1, #10
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282e:	2200      	movs	r2, #0
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	61fa      	str	r2, [r7, #28]
 8002834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002838:	f7fd fcd8 	bl	80001ec <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002868:	4618      	mov	r0, r3
 800286a:	3750      	adds	r7, #80	; 0x50
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	007a1200 	.word	0x007a1200

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08003f40 	.word	0x08003f40

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c4:	f7ff ffdc 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0b5b      	lsrs	r3, r3, #13
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08003f40 	.word	0x08003f40

080028e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e041      	b.n	800297e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f9ca 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 fb3c 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04e      	b.n	8002a3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d022      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x80>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d01d      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x80>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d018      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x80>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x80>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00e      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x80>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x80>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x80>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d111      	bne.n	8002a2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d010      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	e007      	b.n	8002a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40010400 	.word	0x40010400
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40001800 	.word	0x40001800

08002a68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e097      	b.n	8002bac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7fe f92f 	bl	8000cf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aac:	f023 0307 	bic.w	r3, r3, #7
 8002ab0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f000 fa71 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	4313      	orrs	r3, r2
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b08:	f023 030c 	bic.w	r3, r3, #12
 8002b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	4313      	orrs	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	011a      	lsls	r2, r3, #4
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	031b      	lsls	r3, r3, #12
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0202 	mvn.w	r2, #2
 8002be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9b5 	bl	8002f66 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9a7 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f9b8 	bl	8002f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0204 	mvn.w	r2, #4
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f98b 	bl	8002f66 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f97d 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f98e 	bl	8002f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0208 	mvn.w	r2, #8
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f961 	bl	8002f66 <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f953 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f964 	bl	8002f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d122      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d11b      	bne.n	8002d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0210 	mvn.w	r2, #16
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f937 	bl	8002f66 <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f929 	bl	8002f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f93a 	bl	8002f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d10e      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d107      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0201 	mvn.w	r2, #1
 8002d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd feae 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b80      	cmp	r3, #128	; 0x80
 8002d44:	d10e      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d107      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fae0 	bl	8003324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d10e      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8ff 	bl	8002f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d10e      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d107      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0220 	mvn.w	r2, #32
 8002db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 faaa 	bl	8003310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e0b4      	b.n	8002f4a <HAL_TIM_ConfigClockSource+0x186>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e18:	d03e      	beq.n	8002e98 <HAL_TIM_ConfigClockSource+0xd4>
 8002e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1e:	f200 8087 	bhi.w	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e26:	f000 8086 	beq.w	8002f36 <HAL_TIM_ConfigClockSource+0x172>
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	d87f      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b70      	cmp	r3, #112	; 0x70
 8002e32:	d01a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0xa6>
 8002e34:	2b70      	cmp	r3, #112	; 0x70
 8002e36:	d87b      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b60      	cmp	r3, #96	; 0x60
 8002e3a:	d050      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x11a>
 8002e3c:	2b60      	cmp	r3, #96	; 0x60
 8002e3e:	d877      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b50      	cmp	r3, #80	; 0x50
 8002e42:	d03c      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0xfa>
 8002e44:	2b50      	cmp	r3, #80	; 0x50
 8002e46:	d873      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d058      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x13a>
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d86f      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b30      	cmp	r3, #48	; 0x30
 8002e52:	d064      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15a>
 8002e54:	2b30      	cmp	r3, #48	; 0x30
 8002e56:	d86b      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d060      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15a>
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d867      	bhi.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d05c      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15a>
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d05a      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x15a>
 8002e68:	e062      	b.n	8002f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f000 f9ad 	bl	80031d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	609a      	str	r2, [r3, #8]
      break;
 8002e96:	e04f      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6899      	ldr	r1, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f000 f996 	bl	80031d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eba:	609a      	str	r2, [r3, #8]
      break;
 8002ebc:	e03c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 f90a 	bl	80030e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2150      	movs	r1, #80	; 0x50
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f963 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002edc:	e02c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 f929 	bl	8003142 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2160      	movs	r1, #96	; 0x60
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f953 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e01c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 f8ea 	bl	80030e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2140      	movs	r1, #64	; 0x40
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f943 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e00c      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f000 f93a 	bl	80031a2 <TIM_ITRx_SetConfig>
      break;
 8002f2e:	e003      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e000      	b.n	8002f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a40      	ldr	r2, [pc, #256]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d00f      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3d      	ldr	r2, [pc, #244]	; (80030bc <TIM_Base_SetConfig+0x118>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <TIM_Base_SetConfig+0x11c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a3b      	ldr	r2, [pc, #236]	; (80030c4 <TIM_Base_SetConfig+0x120>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_Base_SetConfig+0x40>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a3a      	ldr	r2, [pc, #232]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d108      	bne.n	8002ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02b      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d027      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <TIM_Base_SetConfig+0x118>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d023      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a2b      	ldr	r2, [pc, #172]	; (80030c0 <TIM_Base_SetConfig+0x11c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01f      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <TIM_Base_SetConfig+0x120>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01b      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d017      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a28      	ldr	r2, [pc, #160]	; (80030cc <TIM_Base_SetConfig+0x128>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <TIM_Base_SetConfig+0x12c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00f      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <TIM_Base_SetConfig+0x130>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00b      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <TIM_Base_SetConfig+0x134>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d007      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a24      	ldr	r2, [pc, #144]	; (80030dc <TIM_Base_SetConfig+0x138>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <TIM_Base_SetConfig+0x13c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <TIM_Base_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_Base_SetConfig+0xf8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <TIM_Base_SetConfig+0x124>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d103      	bne.n	80030a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	615a      	str	r2, [r3, #20]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40010400 	.word	0x40010400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800
 80030d8:	40001800 	.word	0x40001800
 80030dc:	40001c00 	.word	0x40001c00
 80030e0:	40002000 	.word	0x40002000

080030e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f023 030a 	bic.w	r3, r3, #10
 8003120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003142:	b480      	push	{r7}
 8003144:	b087      	sub	sp, #28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f023 0210 	bic.w	r2, r3, #16
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800316c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	031b      	lsls	r3, r3, #12
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800317e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f043 0307 	orr.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	609a      	str	r2, [r3, #8]
}
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e05a      	b.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d01d      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10c      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40010400 	.word	0x40010400
 8003308:	40014000 	.word	0x40014000
 800330c:	40001800 	.word	0x40001800

08003310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e03f      	b.n	80033ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fd66 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f829 	bl	80033d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d8:	b0c0      	sub	sp, #256	; 0x100
 80033da:	af00      	add	r7, sp, #0
 80033dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	68d9      	ldr	r1, [r3, #12]
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	ea40 0301 	orr.w	r3, r0, r1
 80033fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	431a      	orrs	r2, r3
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	431a      	orrs	r2, r3
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800342c:	f021 010c 	bic.w	r1, r1, #12
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800343a:	430b      	orrs	r3, r1
 800343c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	6999      	ldr	r1, [r3, #24]
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	ea40 0301 	orr.w	r3, r0, r1
 800345a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8f      	ldr	r3, [pc, #572]	; (80036a0 <UART_SetConfig+0x2cc>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d005      	beq.n	8003474 <UART_SetConfig+0xa0>
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b8d      	ldr	r3, [pc, #564]	; (80036a4 <UART_SetConfig+0x2d0>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d104      	bne.n	800347e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7ff fa24 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8003478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800347c:	e003      	b.n	8003486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800347e:	f7ff fa0b 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8003482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003490:	f040 810c 	bne.w	80036ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800349e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	1891      	adds	r1, r2, r2
 80034ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80034ae:	415b      	adcs	r3, r3
 80034b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034b6:	4621      	mov	r1, r4
 80034b8:	eb12 0801 	adds.w	r8, r2, r1
 80034bc:	4629      	mov	r1, r5
 80034be:	eb43 0901 	adc.w	r9, r3, r1
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d6:	4690      	mov	r8, r2
 80034d8:	4699      	mov	r9, r3
 80034da:	4623      	mov	r3, r4
 80034dc:	eb18 0303 	adds.w	r3, r8, r3
 80034e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034e4:	462b      	mov	r3, r5
 80034e6:	eb49 0303 	adc.w	r3, r9, r3
 80034ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003502:	460b      	mov	r3, r1
 8003504:	18db      	adds	r3, r3, r3
 8003506:	653b      	str	r3, [r7, #80]	; 0x50
 8003508:	4613      	mov	r3, r2
 800350a:	eb42 0303 	adc.w	r3, r2, r3
 800350e:	657b      	str	r3, [r7, #84]	; 0x54
 8003510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003518:	f7fc fe68 	bl	80001ec <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <UART_SetConfig+0x2d4>)
 8003522:	fba3 2302 	umull	r2, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	011c      	lsls	r4, r3, #4
 800352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800353c:	4642      	mov	r2, r8
 800353e:	464b      	mov	r3, r9
 8003540:	1891      	adds	r1, r2, r2
 8003542:	64b9      	str	r1, [r7, #72]	; 0x48
 8003544:	415b      	adcs	r3, r3
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800354c:	4641      	mov	r1, r8
 800354e:	eb12 0a01 	adds.w	sl, r2, r1
 8003552:	4649      	mov	r1, r9
 8003554:	eb43 0b01 	adc.w	fp, r3, r1
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356c:	4692      	mov	sl, r2
 800356e:	469b      	mov	fp, r3
 8003570:	4643      	mov	r3, r8
 8003572:	eb1a 0303 	adds.w	r3, sl, r3
 8003576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800357a:	464b      	mov	r3, r9
 800357c:	eb4b 0303 	adc.w	r3, fp, r3
 8003580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003598:	460b      	mov	r3, r1
 800359a:	18db      	adds	r3, r3, r3
 800359c:	643b      	str	r3, [r7, #64]	; 0x40
 800359e:	4613      	mov	r3, r2
 80035a0:	eb42 0303 	adc.w	r3, r2, r3
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
 80035a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035ae:	f7fc fe1d 	bl	80001ec <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <UART_SetConfig+0x2d4>)
 80035ba:	fba3 2301 	umull	r2, r3, r3, r1
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2264      	movs	r2, #100	; 0x64
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	1acb      	subs	r3, r1, r3
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <UART_SetConfig+0x2d4>)
 80035d0:	fba3 2302 	umull	r2, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035dc:	441c      	add	r4, r3
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035f8:	415b      	adcs	r3, r3
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003600:	4641      	mov	r1, r8
 8003602:	1851      	adds	r1, r2, r1
 8003604:	6339      	str	r1, [r7, #48]	; 0x30
 8003606:	4649      	mov	r1, r9
 8003608:	414b      	adcs	r3, r1
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003618:	4659      	mov	r1, fp
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003622:	4651      	mov	r1, sl
 8003624:	00ca      	lsls	r2, r1, #3
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4603      	mov	r3, r0
 800362c:	4642      	mov	r2, r8
 800362e:	189b      	adds	r3, r3, r2
 8003630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003634:	464b      	mov	r3, r9
 8003636:	460a      	mov	r2, r1
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800364c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003654:	460b      	mov	r3, r1
 8003656:	18db      	adds	r3, r3, r3
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
 800365a:	4613      	mov	r3, r2
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800366a:	f7fc fdbf 	bl	80001ec <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <UART_SetConfig+0x2d4>)
 8003674:	fba3 1302 	umull	r1, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2164      	movs	r1, #100	; 0x64
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	3332      	adds	r3, #50	; 0x32
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <UART_SetConfig+0x2d4>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	f003 0207 	and.w	r2, r3, #7
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4422      	add	r2, r4
 800369a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800369c:	e105      	b.n	80038aa <UART_SetConfig+0x4d6>
 800369e:	bf00      	nop
 80036a0:	40011000 	.word	0x40011000
 80036a4:	40011400 	.word	0x40011400
 80036a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036be:	4642      	mov	r2, r8
 80036c0:	464b      	mov	r3, r9
 80036c2:	1891      	adds	r1, r2, r2
 80036c4:	6239      	str	r1, [r7, #32]
 80036c6:	415b      	adcs	r3, r3
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ce:	4641      	mov	r1, r8
 80036d0:	1854      	adds	r4, r2, r1
 80036d2:	4649      	mov	r1, r9
 80036d4:	eb43 0501 	adc.w	r5, r3, r1
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	00eb      	lsls	r3, r5, #3
 80036e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e6:	00e2      	lsls	r2, r4, #3
 80036e8:	4614      	mov	r4, r2
 80036ea:	461d      	mov	r5, r3
 80036ec:	4643      	mov	r3, r8
 80036ee:	18e3      	adds	r3, r4, r3
 80036f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036f4:	464b      	mov	r3, r9
 80036f6:	eb45 0303 	adc.w	r3, r5, r3
 80036fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800370a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800371a:	4629      	mov	r1, r5
 800371c:	008b      	lsls	r3, r1, #2
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003724:	4621      	mov	r1, r4
 8003726:	008a      	lsls	r2, r1, #2
 8003728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800372c:	f7fc fd5e 	bl	80001ec <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4b60      	ldr	r3, [pc, #384]	; (80038b8 <UART_SetConfig+0x4e4>)
 8003736:	fba3 2302 	umull	r2, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	011c      	lsls	r4, r3, #4
 800373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003742:	2200      	movs	r2, #0
 8003744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800374c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	1891      	adds	r1, r2, r2
 8003756:	61b9      	str	r1, [r7, #24]
 8003758:	415b      	adcs	r3, r3
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003760:	4641      	mov	r1, r8
 8003762:	1851      	adds	r1, r2, r1
 8003764:	6139      	str	r1, [r7, #16]
 8003766:	4649      	mov	r1, r9
 8003768:	414b      	adcs	r3, r1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003778:	4659      	mov	r1, fp
 800377a:	00cb      	lsls	r3, r1, #3
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003782:	4651      	mov	r1, sl
 8003784:	00ca      	lsls	r2, r1, #3
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	4603      	mov	r3, r0
 800378c:	4642      	mov	r2, r8
 800378e:	189b      	adds	r3, r3, r2
 8003790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003794:	464b      	mov	r3, r9
 8003796:	460a      	mov	r2, r1
 8003798:	eb42 0303 	adc.w	r3, r2, r3
 800379c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037b8:	4649      	mov	r1, r9
 80037ba:	008b      	lsls	r3, r1, #2
 80037bc:	4641      	mov	r1, r8
 80037be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c2:	4641      	mov	r1, r8
 80037c4:	008a      	lsls	r2, r1, #2
 80037c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037ca:	f7fc fd0f 	bl	80001ec <__aeabi_uldivmod>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <UART_SetConfig+0x4e4>)
 80037d4:	fba3 1302 	umull	r1, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	3332      	adds	r3, #50	; 0x32
 80037e6:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <UART_SetConfig+0x4e4>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f2:	441c      	add	r4, r3
 80037f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f8:	2200      	movs	r2, #0
 80037fa:	673b      	str	r3, [r7, #112]	; 0x70
 80037fc:	677a      	str	r2, [r7, #116]	; 0x74
 80037fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003802:	4642      	mov	r2, r8
 8003804:	464b      	mov	r3, r9
 8003806:	1891      	adds	r1, r2, r2
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	415b      	adcs	r3, r3
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003812:	4641      	mov	r1, r8
 8003814:	1851      	adds	r1, r2, r1
 8003816:	6039      	str	r1, [r7, #0]
 8003818:	4649      	mov	r1, r9
 800381a:	414b      	adcs	r3, r1
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800382a:	4659      	mov	r1, fp
 800382c:	00cb      	lsls	r3, r1, #3
 800382e:	4651      	mov	r1, sl
 8003830:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003834:	4651      	mov	r1, sl
 8003836:	00ca      	lsls	r2, r1, #3
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	4603      	mov	r3, r0
 800383e:	4642      	mov	r2, r8
 8003840:	189b      	adds	r3, r3, r2
 8003842:	66bb      	str	r3, [r7, #104]	; 0x68
 8003844:	464b      	mov	r3, r9
 8003846:	460a      	mov	r2, r1
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	663b      	str	r3, [r7, #96]	; 0x60
 8003858:	667a      	str	r2, [r7, #100]	; 0x64
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003866:	4649      	mov	r1, r9
 8003868:	008b      	lsls	r3, r1, #2
 800386a:	4641      	mov	r1, r8
 800386c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003870:	4641      	mov	r1, r8
 8003872:	008a      	lsls	r2, r1, #2
 8003874:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003878:	f7fc fcb8 	bl	80001ec <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <UART_SetConfig+0x4e4>)
 8003882:	fba3 1302 	umull	r1, r3, r3, r2
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2164      	movs	r1, #100	; 0x64
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	3332      	adds	r3, #50	; 0x32
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <UART_SetConfig+0x4e4>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4422      	add	r2, r4
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	bf00      	nop
 80038ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038b0:	46bd      	mov	sp, r7
 80038b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b6:	bf00      	nop
 80038b8:	51eb851f 	.word	0x51eb851f

080038bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038bc:	b084      	sub	sp, #16
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	f107 001c 	add.w	r0, r7, #28
 80038ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d122      	bne.n	800391a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 faa2 	bl	8003e58 <USB_CoreReset>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e01a      	b.n	8003950 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa96 	bl	8003e58 <USB_CoreReset>
 800392c:	4603      	mov	r3, r0
 800392e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
 8003942:	e005      	b.n	8003950 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10b      	bne.n	800396e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f043 0206 	orr.w	r2, r3, #6
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800397a:	b004      	add	sp, #16
 800397c:	4770      	bx	lr

0800397e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 0201 	bic.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d115      	bne.n	80039ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f7fd fbb2 	bl	8001138 <HAL_Delay>
      ms++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa2e 	bl	8003e3c <USB_GetMode>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d01e      	beq.n	8003a24 <USB_SetCurrentMode+0x84>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b31      	cmp	r3, #49	; 0x31
 80039ea:	d9f0      	bls.n	80039ce <USB_SetCurrentMode+0x2e>
 80039ec:	e01a      	b.n	8003a24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d115      	bne.n	8003a20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a00:	2001      	movs	r0, #1
 8003a02:	f7fd fb99 	bl	8001138 <HAL_Delay>
      ms++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fa15 	bl	8003e3c <USB_GetMode>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <USB_SetCurrentMode+0x84>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b31      	cmp	r3, #49	; 0x31
 8003a1c:	d9f0      	bls.n	8003a00 <USB_SetCurrentMode+0x60>
 8003a1e:	e001      	b.n	8003a24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e005      	b.n	8003a30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b32      	cmp	r3, #50	; 0x32
 8003a28:	d101      	bne.n	8003a2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a38:	b084      	sub	sp, #16
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e009      	b.n	8003a6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	3340      	adds	r3, #64	; 0x40
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	2200      	movs	r2, #0
 8003a64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0e      	cmp	r3, #14
 8003a70:	d9f2      	bls.n	8003a58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11c      	bne.n	8003ab2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
 8003ab0:	e00b      	b.n	8003aca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003adc:	4619      	mov	r1, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	680b      	ldr	r3, [r1, #0]
 8003ae8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10c      	bne.n	8003b0a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003af6:	2100      	movs	r1, #0
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f965 	bl	8003dc8 <USB_SetDevSpeed>
 8003afe:	e008      	b.n	8003b12 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b00:	2101      	movs	r1, #1
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f960 	bl	8003dc8 <USB_SetDevSpeed>
 8003b08:	e003      	b.n	8003b12 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f95b 	bl	8003dc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b12:	2110      	movs	r1, #16
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8f3 	bl	8003d00 <USB_FlushTxFifo>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f91f 	bl	8003d68 <USB_FlushRxFifo>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	461a      	mov	r2, r3
 8003b48:	2300      	movs	r3, #0
 8003b4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	461a      	mov	r2, r3
 8003b54:	2300      	movs	r3, #0
 8003b56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	e043      	b.n	8003be6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b74:	d118      	bne.n	8003ba8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e013      	b.n	8003bba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e008      	b.n	8003bba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2300      	movs	r3, #0
 8003bca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	3301      	adds	r3, #1
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3b7      	bcc.n	8003b5e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	e043      	b.n	8003c7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0a:	d118      	bne.n	8003c3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e013      	b.n	8003c50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	461a      	mov	r2, r3
 8003c36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	e008      	b.n	8003c50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3b7      	bcc.n	8003bf4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f043 0210 	orr.w	r2, r3, #16
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <USB_DevInit+0x2c4>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f043 0208 	orr.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cf8:	b004      	add	sp, #16
 8003cfa:	4770      	bx	lr
 8003cfc:	803c3800 	.word	0x803c3800

08003d00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <USB_FlushTxFifo+0x64>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d901      	bls.n	8003d20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e01b      	b.n	8003d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	daf2      	bge.n	8003d0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	019b      	lsls	r3, r3, #6
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <USB_FlushTxFifo+0x64>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e006      	b.n	8003d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d0f0      	beq.n	8003d38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	00030d40 	.word	0x00030d40

08003d68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3301      	adds	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a11      	ldr	r2, [pc, #68]	; (8003dc4 <USB_FlushRxFifo+0x5c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e018      	b.n	8003db8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	daf2      	bge.n	8003d74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2210      	movs	r2, #16
 8003d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <USB_FlushRxFifo+0x5c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e006      	b.n	8003db8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d0f0      	beq.n	8003d98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	00030d40 	.word	0x00030d40

08003dc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e14:	f023 0303 	bic.w	r3, r3, #3
 8003e18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0301 	and.w	r3, r3, #1
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <USB_CoreReset+0x64>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e01b      	b.n	8003eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	daf2      	bge.n	8003e64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3301      	adds	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <USB_CoreReset+0x64>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d0f0      	beq.n	8003e8e <USB_CoreReset+0x36>

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	00030d40 	.word	0x00030d40

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4d0d      	ldr	r5, [pc, #52]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec4:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	2600      	movs	r6, #0
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	4d0b      	ldr	r5, [pc, #44]	; (8003f00 <__libc_init_array+0x40>)
 8003ed2:	4c0c      	ldr	r4, [pc, #48]	; (8003f04 <__libc_init_array+0x44>)
 8003ed4:	f000 f820 	bl	8003f18 <_init>
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	2600      	movs	r6, #0
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	08003f50 	.word	0x08003f50
 8003efc:	08003f50 	.word	0x08003f50
 8003f00:	08003f50 	.word	0x08003f50
 8003f04:	08003f54 	.word	0x08003f54

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
